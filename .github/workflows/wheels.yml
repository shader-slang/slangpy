name: wheels
on:
  pull_request:
    branches: [ main ]
    inputs:
      upload:
        description: 'Upload wheels to PyPI? (0: no, 1: yes)'
        required: true
        default: '0'
  workflow_dispatch:
    inputs:
      upload:
        description: 'Upload wheels to PyPI? (0: no, 1: yes)'
        required: true
        default: '0'

env:
  CIBW_BUILD_VERBOSITY: 1
  CIBW_SKIP: "*-musllinux* pp*"
  CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
  CIBW_ARCHS_WINDOWS: auto64
  CIBW_ARCHS_LINUX: auto64
  CIBW_TEST_COMMAND: "python -c \"import slangpy\""
  # zip required for vcpkg, rest for glfw
  CIBW_BEFORE_ALL_LINUX: yum install -y zip wayland-devel libxkbcommon-devel libXcursor-devel libXi-devel libXinerama-devel libXrandr-devel
  MACOSX_DEPLOYMENT_TARGET: 14.0
  # make sure slangpy wheel is build with testing data + corrected project directory
  BUILD_RELEASE_WHEEL: 1
  BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
  KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  CIBW_REPAIR_WHEEL_COMMAND_MACOS: "bash .github/scripts/sign_macos_bins.sh {wheel} {dest_dir}"

jobs:
  wheels:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        os: [windows, linux, macos]
        platform: [x86_64, aarch64]
        python: [cp39, cp310, cp311, cp312, cp313]
        exclude:
          # Exclude aarch64 for windows/linux
          - { os: windows, platform: aarch64 }
          - { os: linux, platform: aarch64 }
          # Exclude x86_64 for macos
          - { os: macos, platform: x86_64 }
        include:
          # Specify runners
          - { os: windows, runs-on: [windows-latest] }
          - { os: linux, runs-on: [ubuntu-latest] }
          - { os: macos, runs-on: [macos-latest] }

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

        # Used to host cibuildwheel.
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Install cibuildwheel.
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.20.0

      # Setup MSVC.
      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Build wheels.
      - name: Build wheels
        env:
          CIBW_BUILD: ${{ matrix.python }}-*
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      # Notarize macOS Wheels
      - name: Notarize macOS Wheels
        if: matrix.os == 'macos'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }} # For the repair script, if needed there explicitly
        run: |
          echo "Looking for wheels in ./wheelhouse"
          ls -l ./wheelhouse
          for wheel_path in ./wheelhouse/*.whl; do
            if [[ -f "$wheel_path" ]]; then
              echo "Processing wheel: $wheel_path"
              echo "Submitting $wheel_path for notarization..."
              # Ensure you have logged in with notarytool if required, or use appropriate flags for credentials
              if xcrun notarytool submit "$wheel_path" --apple-id "$APPLE_ID" --password "$APPLE_APP_SPECIFIC_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait; then
                echo "Notarization successful for $wheel_path. Stapling..."
                xcrun stapler staple "$wheel_path"
              else
                echo "Notarization failed for $wheel_path. Check logs."
                # Optionally, retrieve the log for the submission
                # xcrun notarytool log <submission_id> --apple-id "$APPLE_ID" --password "$APPLE_APP_SPECIFIC_PASSWORD" --team-id "$APPLE_TEAM_ID" > notarization_log.json
                # cat notarization_log.json
                exit 1 # Fail the workflow if notarization fails
              fi
            else
              echo "No wheels found matching ./wheelhouse/*.whl, or $wheel_path is not a file."
            fi
          done

      # Copy wheels to artifact.
      - name: Copy wheels to artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.python }}
          path: ./wheelhouse/*.whl


  upload_pypi:
    name: Upload wheels to PyPI
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.upload == '1'}}
    needs: [wheels]
    environment: pypi

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
